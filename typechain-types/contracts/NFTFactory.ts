/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface NFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collectionDropImplementation"
      | "createCollectionDrop"
      | "createEditionDrop"
      | "editionDropImplementation"
      | "getCollectionContracts"
      | "getEditionContracts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CollectionDropDeployed" | "EditionDropDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "collectionDropImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCollectionDrop",
    values: [string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createEditionDrop",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "editionDropImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEditionContracts",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "collectionDropImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollectionDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEditionDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editionDropImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEditionContracts",
    data: BytesLike
  ): Result;
}

export namespace CollectionDropDeployedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    name: string,
    symbol: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    name: string,
    symbol: string,
    owner: string
  ];
  export interface OutputObject {
    contractAddress: string;
    name: string;
    symbol: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditionDropDeployedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    uri: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    uri: string,
    owner: string
  ];
  export interface OutputObject {
    contractAddress: string;
    uri: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NFTFactory;
  waitForDeployment(): Promise<this>;

  interface: NFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collectionDropImplementation: TypedContractMethod<[], [string], "view">;

  createCollectionDrop: TypedContractMethod<
    [name: string, symbol: string, owner: AddressLike],
    [void],
    "nonpayable"
  >;

  createEditionDrop: TypedContractMethod<
    [uri: string, owner: AddressLike],
    [void],
    "nonpayable"
  >;

  editionDropImplementation: TypedContractMethod<[], [string], "view">;

  getCollectionContracts: TypedContractMethod<[], [string[]], "view">;

  getEditionContracts: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collectionDropImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createCollectionDrop"
  ): TypedContractMethod<
    [name: string, symbol: string, owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createEditionDrop"
  ): TypedContractMethod<
    [uri: string, owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editionDropImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEditionContracts"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "CollectionDropDeployed"
  ): TypedContractEvent<
    CollectionDropDeployedEvent.InputTuple,
    CollectionDropDeployedEvent.OutputTuple,
    CollectionDropDeployedEvent.OutputObject
  >;
  getEvent(
    key: "EditionDropDeployed"
  ): TypedContractEvent<
    EditionDropDeployedEvent.InputTuple,
    EditionDropDeployedEvent.OutputTuple,
    EditionDropDeployedEvent.OutputObject
  >;

  filters: {
    "CollectionDropDeployed(address,string,string,address)": TypedContractEvent<
      CollectionDropDeployedEvent.InputTuple,
      CollectionDropDeployedEvent.OutputTuple,
      CollectionDropDeployedEvent.OutputObject
    >;
    CollectionDropDeployed: TypedContractEvent<
      CollectionDropDeployedEvent.InputTuple,
      CollectionDropDeployedEvent.OutputTuple,
      CollectionDropDeployedEvent.OutputObject
    >;

    "EditionDropDeployed(address,string,address)": TypedContractEvent<
      EditionDropDeployedEvent.InputTuple,
      EditionDropDeployedEvent.OutputTuple,
      EditionDropDeployedEvent.OutputObject
    >;
    EditionDropDeployed: TypedContractEvent<
      EditionDropDeployedEvent.InputTuple,
      EditionDropDeployedEvent.OutputTuple,
      EditionDropDeployedEvent.OutputObject
    >;
  };
}
